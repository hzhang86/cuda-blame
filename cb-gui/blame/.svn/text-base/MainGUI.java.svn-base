package blame;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.PrintStream;
import java.util.Iterator;
import java.util.HashSet;


import javax.swing.JFrame;
import javax.swing.JTabbedPane;
import javax.swing.UIManager;
import javax.swing.JComponent;


import javax.swing.JLabel;
import javax.swing.JPanel;
import java.awt.GridLayout;


public class MainGUI {
	
	
	   protected static JComponent makeTextPanel(String text) {
	        JPanel panel = new JPanel(false);
	        JLabel filler = new JLabel(text);
	        filler.setHorizontalAlignment(JLabel.CENTER);
	        panel.setLayout(new GridLayout(1, 1));
	        panel.add(filler);
	        return panel;
	    }

	
	
	public static void launchGUI(BlameContainer bc, profiler.ProfilerData pd) throws IOException 
	{
		// Window for showing all nodes (and the instances) that
		// occurred during a blame run, this will then change
		// what is in the BlameSourceWindow and the BlameExitVarWindow
		
		JTabbedPane tabbedPane = new JTabbedPane();
		
		BlameTreeBlamePoints bt = new BlameTreeBlamePoints(bc);
		BlameTreeDataCentric btdc = new BlameTreeDataCentric(bc);
		ProfileTree pt = new ProfileTree(pd);
		
		
		//JComponent panel2 = makeTextPanel("Panel #2");
		//tabbedPane.addTab("Full Data Centric", panel2);
		
		tabbedPane.addTab("Full Data Centric", btdc);
		tabbedPane.addTab("Blame Points (Data/Code Hybrid)", bt);
		
		
		
		//JComponent panel3 = makeTextPanel("Panel #3");
		//tabbedPane.addTab("Full Code Centric", panel3);
		
		tabbedPane.addTab("Full Code Centric", pt);
		
		
		
		
		BlameNodeWindow   bnw = new BlameNodeWindow(bc);
		VariableMetaData vmd = new VariableMetaData();
		
	    final boolean useSystemLookAndFeel = false;

		   if (useSystemLookAndFeel) {
	            try {
	                UIManager.setLookAndFeel(
	                    UIManager.getSystemLookAndFeelClassName());
	            } catch (Exception e) {
	                System.err.println("Couldn't use system look and feel.");
	            }
	        }

	        //Create and set up the window.
	        JFrame frame = new JFrame("Blame Points and Variables");
	        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	        

	        //Add content to the window.
	        //frame.add(new BlameTree(bc));
	        frame.add(tabbedPane);
	        
	        //Display the window.
	        frame.pack();
	        frame.setVisible(true);
		
		//bt.createAndShowGUI();
		
		
	        
		
		
//		 Window for showing the source files blame touches
		BlameSourceWindow bsw = new BlameSourceWindow(bc, bnw, vmd, bt, btdc);
		bsw.setVisible(true);	
		
		
		VariableFilter vf = new VariableFilter();
		vf.setVisible(true);
		
	    JFrame vfframe = new JFrame("CheckBoxDemo");
        vfframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        //Create and set up the content pane.
        JComponent newContentPane = new VariableFilter();
        newContentPane.setOpaque(true); //content panes must be opaque
        vfframe.setContentPane(newContentPane);

        //Display the window.
        vfframe.pack();
        vfframe.setVisible(true);
		
		
		
		// Make it so if you close the source window, the program ends
		bsw.addWindowListener(new WindowAdapter() {
			public void windowClosing( WindowEvent e )
			  {
				System.exit( 0 );
			  }
			}
		);
		
		// Make it so if you close the node window, the program ends
		bnw.addWindowListener(new WindowAdapter() {
			public void windowClosing( WindowEvent e )
			  {
				System.exit( 0 );
			  }
			}
		);
		
		
		
		
	}
	
	
	public static void listFunctionsByName(BlameContainer bc) throws IOException
	{
		
		FileOutputStream foStream;
		PrintStream pStream;
		
		try 
		{
			foStream = new FileOutputStream("funcsOutByName2.txt");
			pStream = new PrintStream(foStream);
			
			//Vector<BlameFunction> coll = (Vector) bc.getAllFunctions().values();
			
			Iterator<BlameFunction> it = bc.getSortedFunctions(true).values().iterator();
			while (it.hasNext())
			{
				BlameFunction bf = (BlameFunction) it.next();	
				pStream.println(bf.getName());
				
				
				pStream.println("  Exit Variables:");
				Iterator<ExitVariable> it_ev = bf.getExitVariables().values().iterator();
				while (it_ev.hasNext())
				{
					ExitVariable ev = it_ev.next();
					pStream.println("  " + ev);
					
				}
				pStream.println();
				
				pStream.println("  Exit Variable Fields:");
				Iterator<ExitVariable> it_evf = bf.getExitVarFields().values().iterator();
				while (it_evf.hasNext())
				{
					ExitVariable ev = it_evf.next();
					pStream.println("  " + ev);
					
				}
				pStream.println();		
				
				
				pStream.println("  Local Variables:");
				Iterator<ExitProgram> it_lv = bf.getExitPrograms().values().iterator();
				while (it_lv.hasNext())
				{
					ExitProgram ev = it_lv.next();
					pStream.println("  " + ev);
					
				}
				pStream.println();							
				
				
				pStream.println("  Local Variable Fields:");
				Iterator<ExitProgram> it_lvf = bf.getExitProgFields().values().iterator();
				while (it_lvf.hasNext())
				{
					ExitProgram ev = it_lvf.next();
					pStream.println("  " + ev);
					
				}
				pStream.println();							
				
			}

			
			
			
		}
		catch(Exception e)
		{
			System.err.println("Could not load file!");
		}
	}
	
	
	
	public static void listFunctions(BlameContainer bc) throws IOException
	{
		
		FileOutputStream foStream;
		PrintStream pStream;
		
		try 
		{
			foStream = new FileOutputStream("funcsOut2.txt");
			pStream = new PrintStream(foStream);
			
			//Vector<BlameFunction> coll = (Vector) bc.getAllFunctions().values();
			
			Iterator<BlameFunction> it = bc.getSortedFunctions(false).values().iterator();
			while (it.hasNext())
			{
				BlameFunction bf = (BlameFunction) it.next();	
				pStream.println(bf.getName());
				
				
				pStream.println("  Exit Variables:");
				Iterator<ExitVariable> it_ev = bf.getExitVariables().values().iterator();
				while (it_ev.hasNext())
				{
					ExitVariable ev = it_ev.next();
					pStream.println("  " + ev);
					
				}
				pStream.println();
				
				pStream.println("  Exit Variable Fields:");
				Iterator<ExitVariable> it_evf = bf.getExitVarFields().values().iterator();
				while (it_evf.hasNext())
				{
					ExitVariable ev = it_evf.next();
					pStream.println("  " + ev);
					
				}
				pStream.println();		
				
				
				pStream.println("  Local Variables:");
				Iterator<ExitProgram> it_lv = bf.getExitPrograms().values().iterator();
				while (it_lv.hasNext())
				{
					ExitProgram ev = it_lv.next();
					pStream.println("  " + ev);
					
				}
				pStream.println();							
				
				
				pStream.println("  Local Variable Fields:");
				Iterator<ExitProgram> it_lvf = bf.getExitProgFields().values().iterator();
				while (it_lvf.hasNext())
				{
					ExitProgram ev = it_lvf.next();
					pStream.println("  " + ev);
					
				}
				pStream.println();							
				
			}

			
			
			
		}
		catch(Exception e)
		{
			System.err.println("Could not load file!");
		}
	}
	
	
	

	public static void listFunctionsByName(profiler.ProfilerData bc) throws IOException
	{
		FileOutputStream foStream;
		PrintStream pStream;
		
		try 
		{
			foStream = new FileOutputStream("PROFILEfuncsOutByName2.txt");
			pStream = new PrintStream(foStream);
			
			
			Iterator<profiler.ProfilerFunction> it = bc.getSortedFunctions(true).values().iterator();
			while (it.hasNext())
			{
				profiler.ProfilerFunction bf = (profiler.ProfilerFunction) it.next();	
				pStream.println(bf);
				
			}
		}
		catch(Exception e)
		{
			System.err.println("Could not load file!");
		}
	}
	
	
	
	public static void listFunctions(profiler.ProfilerData bc) throws IOException
	{
		
		FileOutputStream foStream;
		PrintStream pStream;
		
		try 
		{
			foStream = new FileOutputStream("PROFILEfuncsOut2.txt");
			pStream = new PrintStream(foStream);
						
			Iterator<profiler.ProfilerFunction> it = bc.getSortedFunctions(false).values().iterator();
			while (it.hasNext())
			{
				profiler.ProfilerFunction bf = (profiler.ProfilerFunction) it.next();	
				pStream.println(bf);
					
				
			}
		}
		catch(Exception e)
		{
			System.err.println("Could not load file!");
		}
	}
	
	
	
	
	
	public static void main(String args[]) throws IOException
	{
		
		// Creates new BlameContainer for all of the blame for the
		//   program across all nodes
		BlameContainer bc = new BlameContainer();	
		profiler.ProfilerData pd = new profiler.ProfilerData();

		
		SourceContainer.sourceFiles = new HashMap<String, SourceFile>();
		
		int numNodes = 0;
		
		File f = new File(args[0]);
	
		
		try {
			BufferedReader bufReader = new BufferedReader(new FileReader(f));
			
			String line = null;
			
			
			String typeOfTest = bufReader.readLine();
			Global.typeOfTest = Integer.valueOf(typeOfTest).intValue();
			
			Global.testProgram = new String(bufReader.readLine());
			profiler.Global.testProgram = Global.testProgram;
			
			
			System.out.println("Name of test program is " + Global.testProgram);
			
			String strNumNodes = bufReader.readLine();
			numNodes = Integer.valueOf(strNumNodes).intValue();
			System.out.println("Number of nodes is " + numNodes);
			
			for (int a = 0; a < numNodes; a++)
			{
				if (Global.typeOfTest == 0)
				{
					line = bufReader.readLine();
					BlameData bd = new BlameData(line, bc, numNodes);
					pd.parseNode(line); 
					bc.addNode(bd);
				}
				else if (Global.typeOfTest == 1)
				{
					line = bufReader.readLine();
					ReadData rd = new ReadData(line, bc, numNodes);
					bc.addNode(rd);
				}
			}
			
			if (Global.typeOfTest == 0)
			{
				HashSet<String> types = bc.getAllTypes();
				Iterator it = types.iterator();
				System.out.println("Types - ");
				while (it.hasNext())
				{
					System.out.println(it.next());
				}
			}
			
			/*
			 
			int numStructFiles = 0;
			String strNumSF = bufReader.readLine();
			numStructFiles = Integer.valueOf(strNumSF).intValue();
			System.out.println("Number of struct files is " + numStructFiles);
			
			for (int a = 0; a < numStructFiles; a++)
			{			
				String structFileName = bufReader.readLine();
				bc.parseStructs(structFileName);
			}
			
			
			int numBlameFiles = 0;

			String strNumBF = bufReader.readLine();
			numBlameFiles = Integer.valueOf(strNumBF).intValue();
			System.out.println("Number of blame files is " + numBlameFiles);
			
			for (int a = 0; a < numBlameFiles; a++)
			{
				// Parse in the dot .blm file for line numbers
				line = bufReader.readLine();
				String staticInfoFileName = line;
				bc.augmentStaticInfo(staticInfoFileName);
			}
			
			// fills in those fields that don't have any blame associated with them
			bc.fillInStructs();
			*/
			
		}
		catch (IOException e) {
			System.err.println("exception happened - here's what I know: ");
			e.printStackTrace();
			System.exit(-1);
		}		
		
		
		
		
		Global.totalInstByNode = new int[numNodes];
		profiler.Global.totalInstByNode = new int[numNodes];

		
		Iterator<ParentData> it = bc.getNodes().iterator();
		int numN = 0;
		int total = 0;
		while (it.hasNext())
		{
			ParentData bd = (ParentData)it.next();
			Global.totalInstByNode[numN] = bd.numInstances();
			profiler.Global.totalInstByNode[numN] = bd.numInstances();

			total += bd.numInstances();
		}
		Global.totalInstances = total;
		profiler.Global.totalInstances = total;
		
		////// PROFILER
			
		//int numNodes = 0;
		//ProfilerData bd = new ProfilerData();


		//File f = new File(args[0]);

	

		//try {
			//BufferedReader bufReader = new BufferedReader(new FileReader(f));
			//String line = null;

			//Global.testProgram = new String(bufReader.readLine());
			//System.out.println("Name of test program is " + Global.testProgram);

			//String strNumNodes = bufReader.readLine();
			//numNodes = Integer.valueOf(strNumNodes).intValue();
			
			
			//System.out.println("Number of nodes is " + numNodes);
			//Global.totalInstByNode = new int[numNodes];


			//for (int a = 0; a < numNodes; a++)
			//{
				//line = bufReader.readLine();
				//int numInstances = bd.parseNode(line); 
				//Global.totalInstByNode[a] = numInstances;
				//Global.totalInstances += numInstances;
			//}
		//}
		//catch (IOException e) {
			//System.err.println("exception happened - here's what I know: ");
			//e.printStackTrace();
			//System.exit(-1);
		//}	
		
		
		listFunctions(pd);
		listFunctionsByName(pd);
		
		
		///// END PROFILER
				
		listFunctions(bc);
		listFunctionsByName(bc);
		
		launchGUI(bc, pd);

		
	}

}

	
	
	
	
	
	
	
	
	
	
	
	
	
	